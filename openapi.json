{
	"openapi": "3.0.1",
	"info": {
		"title": "Pax2Pay API Documentation",
		"version": "0.1"
	},
	"servers": [
		{
			"url": "https://api.pax2pay.com/mpay2-service",
			"description": "production",
			"variables": {}
		},
		{
			"url": "https://uat.pax2pay.com/mpay2-service",
			"description": "uat",
			"variables": {}
		}
	],
	"security": [
		{
			"x-auth-token": []
		}
	],
	"tags": [
		{
			"name": "Authentication",
			"description": "Authentication to Pax2Pay is done via an username and password login, which gives a token. The token has a short lifespan and is unmodifiable by the user. Once successfully logged in, the token must be provided in an `x-auth-token` header for each subsequent request."
		},
		{
			"name": "Users",
			"description": "Users"
		},
		{
			"name": "Roles",
			"description": "Access control to Pax2Pay's sections is done through a set of roles that each user has. A role represents an action that a user can carry out - for instance, the role `card.create` allows a user to create cards. Without that role, access will be denied when the user attempts to create cards. A roleset is a set of roles, since managing many users with many individual roles would be unwieldy. A roleset will tend to represent a position in your organisation - you might have a supervisor roleset with wider privileges than a regular user, but less then a higher up admin roleset."
		},
		{
			"name": "Funding accounts",
			"description": "Funding accounts are Pax2Pay's equivalent of bank accounts. Each funding account represents an actual bank account, held with a provider. These each have balances and currencies. When a virtual card or bank transfer is made, the source funding account must be specified. Funding accounts are uniquely identifiable by their combination id of their provider code and their provider account id. Once created, the provider account id is  unchangeable. An example of this would be \"modulr\" \"A120ABTA\", or \"ixaris\" \"0Uwn66ah4haag\"."
		},
		{
			"name": "Cards"
		},
		{
			"name": "Card types",
			"description": "When requesting a card from Pax2Pay, a card type must be specified. These are different for each provider, and can be accessed dynamically with the following methods."
		},
		{
			"name": "Card options",
			"description": "Card options allows rules to be set up to generate certain cards in certain scenarios. Explain cards, criteria, how you create the card once its been searched"
		},
		{
			"name": "Bank transfers"
		},
		{
			"name": "Pending cards/transfers and limits"
		},
		{
			"name": "Booking info"
		},
		{
			"name": "Configuration"
		}
	],
	"paths": {
		"/beneficiaries/{beneficiaryId}": {
			"get": {
				"tags": [
					"Bank transfers"
				],
				"summary": "Get beneficiary",
				"description": "Gets an existing beneficiary",
				"operationId": "getBeneficiary",
				"parameters": [
					{
						"name": "beneficiaryId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "history",
						"in": "query",
						"description": "Get the edit history of the beneficary. Boolean, optional.",
						"required": false,
						"schema": {
							"type": "boolean"
						},
						"example": true
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BeneficiaryResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": [
					"Bank transfers"
				],
				"summary": "Update existing beneficiary",
				"description": "Update an existing beneficiary",
				"operationId": "updateBeneficiary",
				"parameters": [
					{
						"name": "beneficiaryId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateBeneficiaryRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BeneficiaryResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Bank transfers"
				],
				"summary": "Delete existing beneficiary",
				"description": "Delete an existing beneficiary",
				"operationId": "deleteBeneficiary",
				"parameters": [
					{
						"name": "beneficiaryId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Accepted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BeneficiaryResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/transfers/{providerCode}/{providerTransferId}": {
			"get": {
				"tags": [
					"Bank transfers"
				],
				"summary": "Get transfer",
				"description": "Gets a transfer",
				"operationId": "getTransfer",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerTransferId",
						"in": "path",
						"description": "Transfer id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransferResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/cards": {
			"get": {
				"tags": [
					"Cards"
				],
				"summary": "Get all cards",
				"description": "Gets all existing cards",
				"operationId": "getAllCards",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/CardResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/cards/searches": {
			"post": {
				"tags": [
					"Cards"
				],
				"summary": "Search cards",
				"description": "Search cards",
				"operationId": "searchCards",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CardSearch"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/CardResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/cards/searches/{searchString}": {
			"get": {
				"tags": [
					"Cards"
				],
				"summary": "Fuzzy search cards",
				"description": "Fuzzily search cards",
				"operationId": "fuzzySearchCards",
				"parameters": [
					{
						"name": "searchString",
						"in": "path",
						"description": "String to search for",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/CardResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/v2/cards/virtual": {
			"post": {
				"tags": [
					"Cards"
				],
				"summary": "Create card",
				"description": "Creates a card",
				"operationId": "createCardV2",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateCardRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CardResponseV2"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/users/password/check": {
			"post": {
				"tags": [
					"Authentication"
				],
				"summary": "Check password against requirements",
				"description": "Checks if a password matches requirements, returning help if it doesn't.",
				"operationId": "checkPassword",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PasswordValidateRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PasswordValidateResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/config/{type}": {
			"get": {
				"tags": [
					"Configuration"
				],
				"summary": "Get configuration for",
				"description": "Gets configuration for the given type",
				"operationId": "getConfigFor_1",
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"description": "Configuration type",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"user",
								"organisation"
							]
						}
					},
					{
						"name": "value",
						"in": "path",
						"description": "Key",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConfigResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Configuration"
				],
				"summary": "Save configuration",
				"description": "Save or update configuration",
				"operationId": "saveConfig_1",
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"description": "Configuration type",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"user",
								"organisation"
							]
						}
					},
					{
						"name": "value",
						"in": "path",
						"description": "Key",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ConfigRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConfigResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Configuration"
				],
				"summary": "Delete configuration",
				"description": "Deletes existing configuration",
				"operationId": "deleteConfig_1",
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"description": "Configuration type",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"user",
								"organisation"
							]
						}
					},
					{
						"name": "value",
						"in": "path",
						"description": "Key",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/credentials/{providerCode}/setup": {
			"post": {
				"tags": [
					"Configuration"
				],
				"summary": "Register customer on provider",
				"description": "Registers a customer with a provider. Not supported by all providers, not supported by all environments.",
				"operationId": "registerProvider",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CredentialRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CredentialResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/credentials/{providerCode}": {
			"get": {
				"tags": [
					"Configuration"
				],
				"summary": "Get credentials for provider",
				"description": "Get credentials for the given provider",
				"operationId": "getCredentials",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CredentialResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": [
					"Configuration"
				],
				"summary": "Update credentials for provider",
				"description": "Updates an existing set of credentials for a given provider",
				"operationId": "updateCredential",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CredentialRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CredentialResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Configuration"
				],
				"summary": "Save credentials",
				"description": "Saves new credentials",
				"operationId": "saveCredentials",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CredentialRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CredentialResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Configuration"
				],
				"summary": "Delete credentials for provider",
				"description": "Deletes credentials for the given provider. This is a hard delete and is unrevertable.",
				"operationId": "deleteCredentials",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/credentials": {
			"get": {
				"tags": [
					"Configuration"
				],
				"summary": "Get all credentials",
				"description": "Get all credentials for all providers",
				"operationId": "getAllCredentials",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/CredentialResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/auth/login": {
			"post": {
				"tags": [
					"Authentication"
				],
				"summary": "Login",
				"description": "Logs the user into the system. Responds with a token.",
				"operationId": "login",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/auth/relog": {
			"get": {
				"tags": [
					"Authentication"
				],
				"summary": "Refresh login",
				"description": "Login tokens exist only for a short period of time, and are unchangeable once created. If you want to extend a single login session, this will allow you to do so. A new token will be returned. The previous token will continue to function if this method has been called, until it expires.",
				"operationId": "relog",
				"parameters": [
					{
						"name": "credentials",
						"in": "query",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/RelogWithNewSessionDetailsRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/users/{username}/two-factor": {
			"post": {
				"tags": [
					"Authentication"
				],
				"summary": "Register user for two factor authentication",
				"description": "Registers a user for two factor authentication",
				"operationId": "registerTwoFactorAuthentication",
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "username",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TwoFactorAuthenticationRegistrationRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TwoFactorAuthenticationRegistrationResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/users": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Gets all users",
				"description": "Gets all users",
				"operationId": "getAllUsers",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/UserResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Users"
				],
				"summary": "Create user",
				"description": "Creates a new user",
				"operationId": "createUser",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/users/{username}": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Get user",
				"description": "Gets a user",
				"operationId": "getUser",
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "Username",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": [
					"Users"
				],
				"summary": "Update user",
				"description": "Updates a user",
				"operationId": "updateUser",
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "Username",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserChangeRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Users"
				],
				"summary": "Delete user",
				"description": "Deletes a user",
				"operationId": "deleteUser",
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "Username",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/users/searches": {
			"post": {
				"tags": [
					"Users"
				],
				"summary": "Search users",
				"description": "Search for users",
				"operationId": "searchUsers",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserSearchRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/UserResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/users/password": {
			"put": {
				"tags": [
					"Users"
				],
				"summary": "Change password",
				"description": "Change user's password",
				"operationId": "changePassword",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PasswordChangeRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/users/{username}/limits": {
			"post": {
				"tags": [
					"Pending cards/transfers and limits"
				],
				"summary": "Set user limit",
				"description": "Sets a limit on a user",
				"operationId": "setUserLimit",
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "username",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserLimitsRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Pending cards/transfers and limits"
				],
				"summary": "Remove user limit",
				"description": "Removes a limit on a user",
				"operationId": "deleteUserLimit",
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "username",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserLimitsDeleteRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/roles": {
			"get": {
				"tags": [
					"Roles"
				],
				"summary": "Get all roles",
				"description": "Gets all available roles.",
				"operationId": "getAllRoles",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"*/*": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/RoleResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/roles/{role}": {
			"get": {
				"tags": [
					"Roles"
				],
				"summary": "Get role",
				"description": "Gets a specific role.",
				"operationId": "getRole",
				"parameters": [
					{
						"name": "role",
						"in": "path",
						"description": "Role name, with . replaced with _. Eg, card.create must become card_create.",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/RoleResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/rolesets": {
			"get": {
				"tags": [
					"Roles"
				],
				"summary": "Get all rolesets",
				"description": "Gets all available rolesets",
				"operationId": "getAllRolesets",
				"parameters": [
					{
						"name": "includeRoles",
						"in": "query",
						"description": "If true, adds in the roles that each roleset contains.",
						"required": false,
						"schema": {
							"type": "boolean",
							"default": false
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"*/*": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/RolesetResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Roles"
				],
				"summary": "Create roleset",
				"description": "Creates a roleset. Roleset names must be unique.",
				"operationId": "createRoleset",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateRolesetRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/RolesetResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/rolesets/{roleset}": {
			"get": {
				"tags": [
					"Roles"
				],
				"summary": "Get roleset",
				"description": "Gets a roleset by name.",
				"operationId": "getRoleset",
				"parameters": [
					{
						"name": "roleset",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/RolesetResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": [
					"Roles"
				],
				"summary": "Update roleset",
				"description": "Updates an existing roleset. All fields in the request are nullable; only fields that are populated will be modified.",
				"operationId": "updateRoleset",
				"parameters": [
					{
						"name": "roleset",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateRolesetRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/RolesetResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Roles"
				],
				"summary": "Delete roleset",
				"description": "Deletes a roleset. Cannot delete a roleset whilst some users still have this roleset assigned to them.",
				"operationId": "deleteRoleset",
				"parameters": [
					{
						"name": "roleset",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/rolesets/searches": {
			"post": {
				"tags": [
					"Roles"
				],
				"summary": "Search rolesets",
				"description": "Search rolesets for various criteria",
				"operationId": "searchRolesets",
				"parameters": [
					{
						"name": "includeRoles",
						"in": "query",
						"description": "If true, adds in the roles that each roleset contains.",
						"required": false,
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SearchRolesetsRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"*/*": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/RolesetResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/users/roles": {
			"get": {
				"tags": [
					"Roles"
				],
				"summary": "Get all users' roles",
				"description": "Gets all roles and rolesets for all users.",
				"operationId": "getUsersRoles",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"*/*": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/UserRoleResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/users/{username}/roles": {
			"get": {
				"tags": [
					"Roles"
				],
				"summary": "Get user's roles",
				"description": "Get the roles a user has",
				"operationId": "getUsersRoles_1",
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "Username",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/UserRoleResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/roles/{role}/who": {
			"get": {
				"tags": [
					"Roles"
				],
				"summary": "Get users who have role",
				"description": "ets users who currently have this role.",
				"operationId": "getUsersWhoHaveRole",
				"parameters": [
					{
						"name": "role",
						"in": "path",
						"description": "Role name, with . replaced with _. eg, card.create must become card_create.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"*/*": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/UserRoleResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/rolesets/{roleset}/who": {
			"get": {
				"tags": [
					"Roles"
				],
				"summary": "Get users who have roleset",
				"description": "Gets the users who have the roleset set on them.",
				"operationId": "getUsersWhoHaveRoleset",
				"parameters": [
					{
						"name": "roleset",
						"in": "path",
						"description": "Roleset name",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"*/*": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/UserRoleResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/users/{username}/roles/{role}": {
			"post": {
				"tags": [
					"Roles"
				],
				"summary": "Add role to user",
				"description": "Adds a role to a user",
				"operationId": "addUserRole",
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "Username",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "role",
						"in": "path",
						"description": "Role name, with . replaced with _. eg, card.create must become card_create.",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/UserRoleResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Roles"
				],
				"summary": "Remove role from user",
				"description": "Removes a role from a user",
				"operationId": "removeUserRole",
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "Username",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "role",
						"in": "path",
						"description": "Role name, with . replaced with _. eg, card.create must become card_create.",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/UserRoleResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/users/{username}/rolesets/{roleset}": {
			"put": {
				"tags": [
					"Roles"
				],
				"summary": "Set roleset on user",
				"description": "Sets a roleset on a user, removing any other rolesets",
				"operationId": "setUserRoleset",
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "Username",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "roleset",
						"in": "path",
						"description": "Roleset name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/UserRoleResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Roles"
				],
				"summary": "Add roleset to user",
				"description": "Adds a roleset to a user",
				"operationId": "addUserRoleset",
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "Username",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "roleset",
						"in": "path",
						"description": "Roleset name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/UserRoleResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Roles"
				],
				"summary": "Remove roleset from user",
				"description": "Removes a roleset from a user",
				"operationId": "removeUserRoleset",
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "Username",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "roleset",
						"in": "path",
						"description": "Roleset name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/UserRoleResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/funding-accounts": {
			"get": {
				"tags": [
					"Funding accounts"
				],
				"summary": "Get all funding accounts",
				"description": "Gets all funding accounts.",
				"operationId": "getAllFundingAccounts",
				"parameters": [
					{
						"name": "refresh",
						"in": "query",
						"description": "If set to true, refreshes all accounts with the provider. Default false",
						"required": false,
						"schema": {
							"type": "boolean",
							"default": false
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/AccountResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Funding accounts"
				],
				"summary": "Add funding account",
				"description": "Adds a new funding account. The account must already exist on the provider's system.",
				"operationId": "saveFundingAccount",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AccountCreationRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/funding-accounts/{providerCode}/{providerAccountId}": {
			"get": {
				"tags": [
					"Funding accounts"
				],
				"summary": "Get funding account",
				"description": "Gets a funding account. If the optional parameter refresh is set to true, the funding account will be updated with the provider, getting up to date balances.",
				"operationId": "getFundingAccount",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerAccountId",
						"in": "path",
						"description": "Funding account id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "refresh",
						"in": "query",
						"description": "If set to true, refreshes all accounts with the provider. Default false",
						"required": false,
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": [
					"Funding accounts"
				],
				"summary": "Update funding account",
				"description": "Updates a funding account with the data from the request body. The majority of the account data is immutable - if you need to change, for example, the provider account id, mark this one as deleted and create a new one.",
				"operationId": "updateFundingAccount",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerAccountId",
						"in": "path",
						"description": "Funding account id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateAccountRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccountResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/funding-accounts/searches": {
			"post": {
				"tags": [
					"Funding accounts"
				],
				"summary": "Search for a funding account",
				"description": "Searches for funding accounts",
				"operationId": "searchFundingAccounts",
				"parameters": [
					{
						"name": "refresh",
						"in": "query",
						"description": "If set to true, refreshes all accounts with the provider. Default false",
						"required": false,
						"schema": {
							"type": "boolean",
							"default": false
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AccountSearchRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/AccountResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/cards/virtual": {
			"post": {
				"tags": [
					"Cards"
				],
				"summary": "Create card",
				"description": "Creates a card. Deprecated in favour of /v2/cards/virtual",
				"operationId": "createCard",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateCardRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CardResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"deprecated": true
			}
		},
		"/cards/virtual/{providerCode}/{providerCardId}": {
			"get": {
				"tags": [
					"Cards"
				],
				"summary": "Get existing card",
				"description": "Gets an existing card.",
				"operationId": "getCard",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerCardId",
						"in": "path",
						"description": "Provider card id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "refresh",
						"in": "query",
						"description": "If set to true, updates the card with the provider. Not supported by all providers. Default value false.",
						"required": false,
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CardResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/cards/virtual/{providerCode}/{providerCardId}/amend": {
			"post": {
				"tags": [
					"Cards"
				],
				"summary": "Amend existing card",
				"description": "Amend an existing card",
				"operationId": "amendCard_1",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerCardId",
						"in": "path",
						"description": "Provider card id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AmendCardRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CardResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/cards/virtual/{providerCode}/{providerCardId}/freeze": {
			"get": {
				"tags": [
					"Cards"
				],
				"summary": "Freeze card",
				"description": "Freezes an existing card, temporarily blocking authorisations on the card. Can be undone by thawing.",
				"operationId": "freezeCard",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerCardId",
						"in": "path",
						"description": "Provider card id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CardResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/cards/virtual/{providerCode}/{providerCardId}/thaw": {
			"get": {
				"tags": [
					"Cards"
				],
				"summary": "Thaw frozen card",
				"description": "Thaws a frozen card, allowing authorisations again.",
				"operationId": "thawCard",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerCardId",
						"in": "path",
						"description": "Provider card id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CardResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/cards/virtual/{providerCode}/{providerCardId}/cancel": {
			"get": {
				"tags": [
					"Cards"
				],
				"summary": "Cancel card",
				"description": "Cancels an existing card. Cancelled cards cannot be uncancelled.",
				"operationId": "cancelCard",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerCardId",
						"in": "path",
						"description": "Provider card id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CardResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Cards"
				],
				"summary": "Cancel card",
				"description": "Cancels an existing card. Cancelled cards cannot be uncancelled.",
				"operationId": "cancelCard_1",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerCardId",
						"in": "path",
						"description": "Provider card id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CardResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/cards/virtual/{providerCode}/{providerCardId}/statements/processed": {
			"get": {
				"tags": [
					"Cards"
				],
				"summary": "Get processed statements for card",
				"description": "Get processed statements for a card",
				"operationId": "getCardProcessedStatements",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerCardId",
						"in": "path",
						"description": "Provider card id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ProcessedStatement"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/cards/virtual/{providerCode}/{providerCardId}/transactions": {
			"get": {
				"tags": [
					"Cards"
				],
				"summary": "Get card transactions",
				"description": "Get all transactions for a card",
				"operationId": "getCardTransaction",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerCardId",
						"in": "path",
						"description": "Provider card id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/TransactionResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/cards/virtual/{providerCode}/{providerCardId}/transactions/searches/{searchString}": {
			"get": {
				"tags": [
					"Cards"
				],
				"summary": "Fuzzy search card transactions",
				"description": "Fuzzy search card transactions",
				"operationId": "fuzzySearchCardTransactions",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerCardId",
						"in": "path",
						"description": "Provider card id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "searchString",
						"in": "path",
						"description": "String to search for",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/TransactionResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/cards/virtual/{providerCode}/{providerCardId}/bookings": {
			"get": {
				"tags": [
					"Cards"
				],
				"summary": "Get bookings for a card",
				"description": "Get bookings for a card",
				"operationId": "getCardBookings",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerCardId",
						"in": "path",
						"description": "Provider card id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/BookingInfo"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"deprecated": true
			}
		},
		"/cards/virtual/{providerCode}/{providerCardId}/approve": {
			"post": {
				"tags": [
					"Pending cards/transfers and limits"
				],
				"summary": "Approve pending card",
				"description": "Approves pending card",
				"operationId": "approveCard",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerCardId",
						"in": "path",
						"description": "Provider card id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Accepted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CardResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/cards/virtual/{providerCode}/{providerCardId}/decline": {
			"post": {
				"tags": [
					"Pending cards/transfers and limits"
				],
				"summary": "Decline pending card",
				"description": "Declines pending cards",
				"operationId": "declineCard",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerCardId",
						"in": "path",
						"description": "Provider card id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Accepted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CardResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/cards/virtual/{providerCode}/{providerCardId}/generate": {
			"get": {
				"tags": [
					"Pending cards/transfers and limits"
				],
				"summary": "Generate approved card",
				"description": "Generates an approved card",
				"operationId": "generateApprovedCard",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerCardId",
						"in": "path",
						"description": "Provider card id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "bookingInfo",
						"in": "query",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/BookingInfo"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Accepted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CardResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/v2/cards/types": {
			"get": {
				"tags": [
					"Card types"
				],
				"summary": "Get all card types",
				"description": "Gets all card types",
				"operationId": "getAllCardTypes",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/CardTypeResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/v2/cards/types/{providerCode}": {
			"get": {
				"tags": [
					"Card types"
				],
				"summary": "Get all card types for provider",
				"description": "Gets all card types for a provider",
				"operationId": "getAllCardTypesForProvider",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/CardTypeResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/v2/cards/types/searches": {
			"post": {
				"tags": [
					"Card types"
				],
				"summary": "Search card types",
				"description": "Search card types",
				"operationId": "searchCardTypes",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CardTypeSearchRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/CardTypeResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/v2/cards/types/{providerCode}/{cardTypeId}": {
			"get": {
				"tags": [
					"Card types"
				],
				"summary": "Get card type",
				"description": "Gets a single card type",
				"operationId": "getCardType",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "cardTypeId",
						"in": "path",
						"description": "Card type id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CardTypeResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/v2/card-options/search": {
			"post": {
				"tags": [
					"Card options"
				],
				"summary": "Search card options",
				"description": "Search for card options",
				"operationId": "searchCardOptionsV2",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CardOptionSearch"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/CreateCardRequest"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/v2/card-options/create": {
			"post": {
				"tags": [
					"Card options"
				],
				"summary": "Create card option",
				"description": "Create the nth card option that would be returned, or the 0th if n is not specified. Balance must be set in the search request.",
				"operationId": "createCardOption",
				"parameters": [
					{
						"name": "n",
						"in": "path",
						"description": "Create the nth card option. Defaults to 0",
						"required": true,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CardOptionSearch"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CardResponseV2"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/v2/card-options/create/{n}": {
			"post": {
				"tags": [
					"Card options"
				],
				"summary": "Create card option",
				"description": "Create the nth card option that would be returned, or the 0th if n is not specified. Balance must be set in the search request.",
				"operationId": "createCardOption_1",
				"parameters": [
					{
						"name": "n",
						"in": "path",
						"description": "Create the nth card option. Defaults to 0",
						"required": true,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CardOptionSearch"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CardResponseV2"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/card-options": {
			"get": {
				"tags": [
					"Card options"
				],
				"summary": "Get all card options for current generation",
				"description": "Gets all card options for the most recent generation.",
				"operationId": "getAllCardOptions_1",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/InsertCardOptionRequest"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Card options"
				],
				"summary": "Insert card options",
				"description": "Insert new card options",
				"operationId": "insertCardOptions",
				"parameters": [
					{
						"name": "commit",
						"in": "query",
						"description": "If false or not set, will not persist changes. Default value false",
						"required": false,
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/InsertCardOptionRequest"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/InsertCardOptionRequest"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Card options"
				],
				"summary": "Delete card options",
				"description": "Delete existing card options",
				"operationId": "deleteCardOptions",
				"parameters": [
					{
						"name": "commit",
						"in": "query",
						"description": "If false or not set, will not persist changes. Default value false",
						"required": false,
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/InsertCardOptionRequest"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"202": {
						"description": "Accepted",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/InsertCardOptionRequest"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/card-options/{generation}": {
			"get": {
				"tags": [
					"Card options"
				],
				"summary": "Get all card options",
				"description": "Get all card options for the nth generation, or most recent if not specified.",
				"operationId": "getAllCardOptions",
				"parameters": [
					{
						"name": "generation",
						"in": "path",
						"description": "Generation to get, gets highest if not set",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/InsertCardOptionRequest"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/card-options/generations": {
			"get": {
				"tags": [
					"Card options"
				],
				"summary": "Get all generations",
				"description": "Get all generations between high and low parameters, or max/min if they aren't present",
				"operationId": "getAllGenerations",
				"parameters": [
					{
						"name": "low",
						"in": "query",
						"description": "Lower bound",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "high",
						"in": "query",
						"description": "Higher bound",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "array",
										"items": {
											"$ref": "#/components/schemas/InsertCardOptionRequest"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/card-options/highest-generation": {
			"get": {
				"tags": [
					"Card options"
				],
				"summary": "Get highest generation",
				"description": "Get the highest generation number",
				"operationId": "getHighestGeneration",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "integer",
									"format": "int32"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/card-options/lowest-generation": {
			"get": {
				"tags": [
					"Card options"
				],
				"summary": "Get lowest generation",
				"description": "Get the lowest generation number still extant",
				"operationId": "getLowestGeneration",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "integer",
									"format": "int32"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/card-options/search": {
			"post": {
				"tags": [
					"Card options"
				],
				"summary": "Search card options (deprecated)",
				"description": "Search card options. Deprecated, use /v2/card-options/search",
				"operationId": "searchCardOptions",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CardOptionSearch"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/PaymentMethodOptionResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"deprecated": true
			}
		},
		"/beneficiaries": {
			"get": {
				"tags": [
					"Bank transfers"
				],
				"summary": "Get all beneficiaries",
				"description": "Get all existing beneficiaries",
				"operationId": "getAllBeneficiaries",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/BeneficiaryResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Bank transfers"
				],
				"summary": "Create new beneficiary",
				"description": "Create new beneficiary",
				"operationId": "createNewBeneficiary",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BeneficiaryRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BeneficiaryResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/beneficiaries/searches/{searchString}": {
			"get": {
				"tags": [
					"Bank transfers"
				],
				"summary": "Fuzzy search beneficiaries",
				"description": "Fuzzy search beneficiaries",
				"operationId": "fuzzySearchBeneficiaries",
				"parameters": [
					{
						"name": "searchString",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/BeneficiaryResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/transfers": {
			"get": {
				"tags": [
					"Bank transfers"
				],
				"summary": "Get all transfers",
				"description": "Gets all transfers, refreshing their statuses if the refresh parameter is provided",
				"operationId": "getAllTransfers",
				"parameters": [
					{
						"name": "refresh",
						"in": "query",
						"description": "If set to true, refreshes all transfers with the provider. Default false",
						"required": false,
						"schema": {
							"type": "boolean",
							"default": false
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/TransferResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Bank transfers"
				],
				"summary": "Create transfer",
				"description": "Creates a transfer",
				"operationId": "createTransfer",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TransferRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransferResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/transfers/searches": {
			"post": {
				"tags": [
					"Bank transfers"
				],
				"summary": "Search for transfers",
				"description": "Search for transfers",
				"operationId": "searchTransfers",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Zero-based page index (0..N)",
						"schema": {
							"type": "integer",
							"default": "0"
						}
					},
					{
						"name": "size",
						"in": "query",
						"description": "The size of the page to be returned",
						"schema": {
							"type": "integer",
							"default": "20"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TransferSearch"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/TransferResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/transfers/{providerCode}/{providerTransferId}/approve": {
			"post": {
				"tags": [
					"Pending cards/transfers and limits"
				],
				"summary": "Approve pending transfer",
				"description": "Approves a pending transfer",
				"operationId": "approveTransfer",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerTransferId",
						"in": "path",
						"description": "Transfer id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Accepted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransferResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/transfers/{providerCode}/{providerTransferId}/decline": {
			"post": {
				"tags": [
					"Pending cards/transfers and limits"
				],
				"summary": "Decline pending transfer",
				"description": "Declines a pending transfer",
				"operationId": "declineTransfer",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerTransferId",
						"in": "path",
						"description": "Transfer id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Accepted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransferResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/transfers/{providerCode}/{providerTransferId}/generate": {
			"post": {
				"tags": [
					"Pending cards/transfers and limits"
				],
				"summary": "Generate approved transfer",
				"description": "Generates an approved transfer",
				"operationId": "generateApprovedTransfer",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"description": "Provider code",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerTransferId",
						"in": "path",
						"description": "Transfer id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Accepted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransferResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/config/types": {
			"get": {
				"tags": [
					"Configuration"
				],
				"summary": "Get configuration types",
				"description": "Gets available configuration types",
				"operationId": "getConfigTypes",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConfigTypesResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/config/{type}/{value}": {
			"get": {
				"tags": [
					"Configuration"
				],
				"summary": "Get configuration for",
				"description": "Gets configuration for the given type",
				"operationId": "getConfigFor",
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"description": "Configuration type",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"user",
								"organisation"
							]
						}
					},
					{
						"name": "value",
						"in": "path",
						"description": "Key",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConfigResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Configuration"
				],
				"summary": "Save configuration",
				"description": "Save or update configuration",
				"operationId": "saveConfig",
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"description": "Configuration type",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"user",
								"organisation"
							]
						}
					},
					{
						"name": "value",
						"in": "path",
						"description": "Key",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ConfigRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConfigResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Configuration"
				],
				"summary": "Delete configuration",
				"description": "Deletes existing configuration",
				"operationId": "deleteConfig",
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"description": "Configuration type",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"user",
								"organisation"
							]
						}
					},
					{
						"name": "value",
						"in": "path",
						"description": "Key",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/config/matches/{type}": {
			"post": {
				"tags": [
					"Configuration"
				],
				"summary": "Search for matching configuration",
				"description": "Search for matching configuration",
				"operationId": "getConfigMatches",
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"description": "Configuration type",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"user",
								"organisation"
							]
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ConfigMatchesRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ConfigMatchesResponse"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/booking-info/cards/{providerCode}/{providerCardId}": {
			"put": {
				"tags": [
					"Booking info"
				],
				"summary": "Update booking info for card",
				"description": "Updates an existing booking info with the additional information in the request. Can only add new fields, cannot change any existing ones. There must be a single transaction with a type of either PURCHASE or CREATE_CARD already present.",
				"operationId": "updateBookingInfoForCard",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerCardId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BookingInfoRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/BookingInfoResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Booking info"
				],
				"summary": "Save new booking info for card",
				"description": "Save a new booking info for the specified card. The card must exist. If the card already has a booking info, this will create a new one regardless.",
				"operationId": "saveNewBookingInfoForCard",
				"parameters": [
					{
						"name": "providerCode",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					{
						"name": "providerCardId",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BookingInfoRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/BookingInfoResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/booking-info/{bookingInfoIdentifier}": {
			"put": {
				"tags": [
					"Booking info"
				],
				"summary": "Update booking info by identifier",
				"description": "Updates booking info from the identifier with the additional information in the request. Can only add new fields, cannot change any existing ones.",
				"operationId": "updateBookingInfo",
				"parameters": [
					{
						"name": "bookingInfoIdentifier",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BookingInfoRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"400": {
						"description": "Bad Request",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"default": {
						"description": "default response",
						"content": {
							"*/*": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/FiveFieldsBookingInfoResponse"
										}
									]
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"AddressInfo": {
				"required": [
					"addressLine1",
					"country",
					"postCode",
					"postTown"
				],
				"type": "object",
				"properties": {
					"addressLine1": {
						"type": "string",
						"description": "First line of the address"
					},
					"addressLine2": {
						"type": "string",
						"description": "Additional address line"
					},
					"country": {
						"type": "string",
						"description": "2 character country code",
						"example": "FR"
					},
					"postCode": {
						"type": "string",
						"description": "Post/zip code"
					},
					"postTown": {
						"type": "string",
						"description": "Town/city"
					}
				},
				"description": "Address of destination"
			},
			"TransferDestinationInfo": {
				"required": [
					"currency"
				],
				"type": "object",
				"properties": {
					"accountNumber": {
						"type": "string",
						"description": "Account number. If present, sortCode must also be present, and iban/bic not present",
						"example": "40105678"
					},
					"sortCode": {
						"type": "string",
						"description": "Sort code, dashes optional. If present, accountNumber must also be present, and iban/bic not present",
						"example": "650483"
					},
					"iban": {
						"type": "string",
						"description": "IBAN. If present, bic must also be present, and accountNumber/sortCode not present",
						"example": "FR7630006000011234567890189"
					},
					"bic": {
						"type": "string",
						"description": "BIC, aka SWIFT. If present, iban must also be present, and accountNumber/sortCode not present",
						"example": "UNCRITMM"
					},
					"currency": {
						"type": "string"
					},
					"address": {
						"$ref": "#/components/schemas/AddressInfo"
					},
					"fullName": {
						"type": "string",
						"description": "Full legal name of the beneficiary. Nullable whilst Beneficiary#fullName exists, but this should be set preferably."
					}
				},
				"description": "Destination information"
			},
			"BeneficiaryResponse": {
				"type": "object",
				"properties": {
					"transferDestination": {
						"$ref": "#/components/schemas/TransferDestinationInfo"
					},
					"defaultReference": {
						"type": "string",
						"description": "Default reference for this beneficiary"
					},
					"status": {
						"type": "string",
						"description": "Current beneficiary status",
						"enum": [
							"ACTIVE",
							"DELETED",
							"OUTDATED"
						]
					},
					"name": {
						"type": "string",
						"description": "Name of this beneficiary"
					},
					"fullName": {
						"type": "string",
						"description": "Full legal name of this beneficiary",
						"deprecated": true
					},
					"beneficiaryId": {
						"type": "string",
						"description": "Beneficiary id"
					},
					"createdOn": {
						"type": "string",
						"description": "Date time the beneficiary was created on",
						"format": "date-time"
					},
					"history": {
						"type": "array",
						"description": "Ordered history of the beneficiary's previous states",
						"items": {
							"$ref": "#/components/schemas/BeneficiaryResponse"
						}
					}
				}
			},
			"ErrorMessageDto": {
				"type": "object",
				"properties": {
					"field": {
						"type": "string"
					},
					"value": {
						"type": "object"
					},
					"message": {
						"type": "string"
					}
				}
			},
			"ErrorResponse": {
				"type": "object",
				"properties": {
					"code": {
						"type": "integer",
						"format": "int32"
					},
					"errors": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ErrorMessageDto"
						}
					}
				}
			},
			"UpdateBeneficiaryRequest": {
				"type": "object",
				"properties": {
					"transferDestination": {
						"$ref": "#/components/schemas/TransferDestinationInfo"
					},
					"defaultReference": {
						"type": "string",
						"description": "Default reference for the beneficiary"
					},
					"status": {
						"type": "string",
						"description": "Status of the beneficiary",
						"default": "ACTIVE",
						"enum": [
							"ACTIVE",
							"DELETED",
							"OUTDATED"
						]
					},
					"name": {
						"type": "string",
						"description": "Name of the beneficiary"
					},
					"fullName": {
						"type": "string",
						"description": "Full legal name of the beneficiary",
						"deprecated": true
					}
				}
			},
			"ProviderResponse": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Internal id",
						"format": "int32",
						"deprecated": true
					},
					"code": {
						"type": "string",
						"description": "Provider code",
						"enum": [
							"conferma",
							"ixaris",
							"wex",
							"fake",
							"lodged",
							"modulr",
							"unknown",
							"pax2pay"
						]
					},
					"name": {
						"type": "string",
						"description": "Provider name"
					},
					"status": {
						"type": "string",
						"description": "Provider status",
						"enum": [
							"ACTIVE",
							"DELETED",
							"INACTIVE"
						]
					}
				},
				"description": "Full provider information"
			},
			"OrganisationBalanceLimitResponse": {
				"type": "object",
				"properties": {
					"email": {
						"type": "array",
						"description": "List of emails that are subscribed to the limit alert notification",
						"items": {
							"type": "string",
							"description": "List of emails that are subscribed to the limit alert notification"
						}
					},
					"currency": {
						"type": "string"
					},
					"limit": {
						"type": "number",
						"description": "The minimum amount used for validating the account balances"
					}
				},
				"description": "Represents a balance and currency configured by a superadmin that is used to validate the organisation account balances do not exceed this defined limit. "
			},
			"OrganisationResponse": {
				"type": "object",
				"properties": {
					"code": {
						"type": "string",
						"description": "Internal unique code that represent to organisation"
					},
					"name": {
						"type": "string",
						"description": "Organisation user friendly name"
					},
					"status": {
						"type": "string",
						"description": "Status",
						"enum": [
							"ACTIVE",
							"DELETED"
						]
					},
					"limitResponse": {
						"$ref": "#/components/schemas/OrganisationBalanceLimitResponse"
					}
				},
				"description": "Organisation information of the creating user"
			},
			"FundingLimitResponse": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "Message"
					},
					"status": {
						"type": "string",
						"description": "Status",
						"enum": [
							"SUCCESS",
							"FAILURE"
						]
					},
					"email": {
						"type": "array",
						"description": "Emails this limit applies to",
						"items": {
							"type": "string",
							"description": "Emails this limit applies to"
						}
					},
					"limit": {
						"type": "number",
						"description": "Lower limit"
					}
				},
				"description": "Funding limit information"
			},
			"AccountResponse": {
				"required": [
					"accountType",
					"balance",
					"createdOn",
					"currency",
					"friendlyName",
					"id",
					"organisation",
					"provider",
					"providerAccountId",
					"state",
					"updatedOn"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Internal id",
						"format": "int64",
						"deprecated": true
					},
					"providerAccountId": {
						"type": "string",
						"description": "Id for this account"
					},
					"provider": {
						"$ref": "#/components/schemas/ProviderResponse"
					},
					"organisation": {
						"$ref": "#/components/schemas/OrganisationResponse"
					},
					"currency": {
						"type": "string"
					},
					"state": {
						"type": "string",
						"description": "Status of this account",
						"enum": [
							"ACTIVE",
							"INACTIVE",
							"CLOSED",
							"DELETED",
							"EXPIRED",
							"PENDING",
							"APPROVED",
							"DECLINED",
							"GENERATED"
						]
					},
					"friendlyName": {
						"type": "string",
						"description": "Display name for this account"
					},
					"balance": {
						"minimum": 0,
						"type": "number",
						"description": "Current available balance of this account"
					},
					"actualBalance": {
						"type": "number",
						"description": "Current actual balance of this account"
					},
					"accountType": {
						"type": "string",
						"description": "Type of the account",
						"enum": [
							"FUNDING",
							"CARD"
						]
					},
					"fundingLimit": {
						"$ref": "#/components/schemas/FundingLimitResponse"
					},
					"updatedOn": {
						"type": "string",
						"description": "Datetime the account was last updated on",
						"format": "date-time"
					},
					"createdOn": {
						"type": "string",
						"description": "Datetime the account was created on",
						"format": "date-time"
					}
				},
				"description": "The funding accounts created"
			},
			"TransferResponse": {
				"type": "object",
				"properties": {
					"sourceAccount": {
						"$ref": "#/components/schemas/AccountResponse"
					},
					"beneficiary": {
						"$ref": "#/components/schemas/BeneficiaryResponse"
					},
					"destinationAccount": {
						"$ref": "#/components/schemas/AccountResponse"
					},
					"destination": {
						"$ref": "#/components/schemas/TransferDestinationInfo"
					},
					"amount": {
						"type": "number",
						"description": "Amount transferred"
					},
					"status": {
						"type": "string",
						"description": "Current transfer status",
						"enum": [
							"PENDING",
							"PENDING_FOR_DATE",
							"PENDING_FOR_FUNDS",
							"SETTLED",
							"CANCELLED",
							"ERROR_REJECTED",
							"APPROVAL_PENDING",
							"DECLINED",
							"APPROVED",
							"GENERATED"
						]
					},
					"createdDate": {
						"type": "string",
						"description": "Datetime transfer created on",
						"format": "date-time"
					},
					"paymentDate": {
						"type": "string",
						"description": "Payment date, if scheduled",
						"format": "date"
					},
					"reference": {
						"type": "string",
						"description": "Payment reference"
					},
					"providerCode": {
						"type": "string",
						"description": "Provider code",
						"enum": [
							"conferma",
							"ixaris",
							"wex",
							"fake",
							"lodged",
							"modulr",
							"unknown",
							"pax2pay"
						]
					},
					"providerTransferId": {
						"type": "string",
						"description": "Transfer id"
					},
					"scheduled": {
						"type": "boolean",
						"description": "Is the payment scheduled for the future"
					},
					"errorDescription": {
						"type": "string",
						"description": "Errors, if any"
					}
				}
			},
			"CardTypeSpecification": {
				"type": "object",
				"properties": {
					"cardTypeId": {
						"type": "string",
						"description": "Primary identifier of this card type"
					},
					"description": {
						"type": "string",
						"description": "Description of this card type"
					},
					"scheme": {
						"type": "string",
						"description": "Card scheme",
						"enum": [
							"VISA",
							"MASTERCARD",
							"AMERICAN_EXPRESS"
						]
					},
					"funding": {
						"type": "string",
						"description": "Funding type",
						"enum": [
							"DEBIT",
							"CREDIT",
							"PREPAID"
						]
					},
					"flags": {
						"uniqueItems": true,
						"type": "array",
						"description": "Additional flags",
						"items": {
							"type": "string",
							"description": "Additional flags",
							"enum": [
								"CORPORATE",
								"BUSINESS",
								"CONSUMER"
							]
						}
					},
					"bin": {
						"type": "string",
						"description": "BIN (first 6 numbers)"
					}
				},
				"description": "The card type to use in the card options requests."
			},
			"SupplierBookingInfo": {
				"type": "object",
				"properties": {
					"supplierBookingRef": {
						"type": "string",
						"description": "Supplier booking reference"
					},
					"supplierCode": {
						"type": "string",
						"description": "Supplier code"
					}
				},
				"description": "Booking info related to the supplier"
			},
			"BookedProductInfo": {
				"type": "object",
				"properties": {
					"bookedProductStartTime": {
						"type": "string",
						"description": "Start date of the holiday",
						"format": "date"
					},
					"bookedProductEndTime": {
						"type": "string",
						"description": "End date of the holiday",
						"format": "date"
					},
					"bookedProductStartLoc": {
						"type": "string",
						"description": "Departure airport"
					},
					"bookedProductEndLoc": {
						"type": "string",
						"description": "Arrival airport"
					},
					"bookedProductMerchantCode": {
						"type": "string",
						"description": "Merchant or operator code for the flight"
					}
				},
				"description": "Information about the flight"
			},
			"TravelPartyInfo": {
				"type": "object",
				"properties": {
					"travelPartyLeadPax": {
						"type": "string",
						"description": "Lead passenger name"
					},
					"travelPartyNumAdult": {
						"type": "integer",
						"description": "Number of adults in the party",
						"format": "int32"
					},
					"travelPartyNumChild": {
						"type": "integer",
						"description": "Number of children in the party",
						"format": "int32"
					},
					"travelPartyNumInfant": {
						"type": "integer",
						"description": "Number of infants in the party",
						"format": "int32"
					}
				},
				"description": "Information about the passengers"
			},
			"AgentBookingInfo": {
				"type": "object",
				"properties": {
					"agentBookingOrgCode": {
						"type": "string",
						"description": "Organisation code (?)"
					},
					"agentBookingSystemRef": {
						"type": "string",
						"description": "System reference"
					},
					"agentBookingBasketRef": {
						"type": "string",
						"description": "Basket reference"
					},
					"agentBookingBookingRef": {
						"type": "string",
						"description": "Agent booking reference"
					}
				},
				"description": "Information about the booker"
			},
			"BookingInfo": {
				"required": [
					"bookingOpType"
				],
				"type": "object",
				"properties": {
					"bookingOpType": {
						"type": "string",
						"description": "Booking operation type. Free text field, suggested value \"PURCHASE\""
					},
					"productType": {
						"type": "string",
						"description": "Product type"
					},
					"trackingId": {
						"type": "string",
						"description": "Tracking id"
					},
					"bookingInfoText": {
						"type": "string",
						"description": "Free text describing the booking"
					},
					"bookingDate": {
						"type": "string",
						"description": "Date when the holiday was booked",
						"format": "date"
					},
					"supplierBookingInfo": {
						"$ref": "#/components/schemas/SupplierBookingInfo"
					},
					"createdOn": {
						"type": "string",
						"description": "Datetime that this booking was created on",
						"format": "date-time"
					},
					"createdBy": {
						"type": "string",
						"description": "Username of the creator"
					},
					"bookingRef": {
						"type": "string",
						"description": "Booking reference. Use supplierBookingInfo.supplierBookingRef instead",
						"deprecated": true
					},
					"sellingPriceCurrency": {
						"type": "string"
					},
					"sellingPriceAmount": {
						"type": "number",
						"description": "Cost of the booking"
					},
					"bookedProduct": {
						"$ref": "#/components/schemas/BookedProductInfo"
					},
					"travelParty": {
						"$ref": "#/components/schemas/TravelPartyInfo"
					},
					"agentBookingInfo": {
						"$ref": "#/components/schemas/AgentBookingInfo"
					},
					"chargingMerchantId": {
						"type": "string",
						"description": "Free text, charging merchant"
					}
				},
				"description": "Optional way to save data as to what the card is expected to be used for"
			},
			"CardResponse": {
				"type": "object",
				"properties": {
					"cardType": {
						"$ref": "#/components/schemas/CardTypeSpecification"
					},
					"useAs": {
						"type": "string",
						"description": "Type of card that this should be used as. Mostly relevant for card options.",
						"deprecated": true
					},
					"nameOnCard": {
						"type": "string",
						"description": "Card holder's name"
					},
					"cardNumber": {
						"type": "string",
						"description": "Card number. Only visible unobfuscated on create - any subsequent access will only show the first 6 and last 4 digits."
					},
					"cvv": {
						"type": "string",
						"description": "Card security code"
					},
					"issueDate": {
						"type": "string",
						"description": "Date the card was issued on",
						"format": "date"
					},
					"expiryDate": {
						"type": "string",
						"description": "Expiry date of the card. The day portion is ignored, only uses the month and year.",
						"format": "date"
					},
					"cardForm": {
						"type": "string",
						"description": "Form the card takes. Will always be GENERATED.",
						"deprecated": true,
						"enum": [
							"GENERATABLE",
							"PHYSICAL",
							"VIRTUAL"
						]
					},
					"fundingDate": {
						"type": "string",
						"description": "If there is a scheduled limit on this card, either from amendment or from being created with a funding date, this is the date at which that balance will be applied.",
						"format": "date"
					},
					"fundingBalance": {
						"type": "number",
						"description": "If there is a scheduled limit on this card, either from amendment or from being created with a funding date, this balance will differ from the other balance field, and on the date specified by fundingDate, the balance will be applied."
					},
					"balance": {
						"type": "number",
						"description": "Balance that the card was created for - the maximum amount that can be spent on this card."
					},
					"remainingBalance": {
						"type": "number",
						"description": "Remaining balance of the card. If there has been money spent on the card, this will represent the limit of the card, as defined by balance, minus the spend. Nullable field, single use cards will typically not have this set."
					},
					"notes": {
						"type": "string",
						"description": "Additional notes about this card",
						"deprecated": true
					},
					"usage": {
						"type": "string",
						"description": "Single usage cards can only be used for one transaction",
						"enum": [
							"SINGLE_USE",
							"MULTIPLE_USE"
						]
					},
					"state": {
						"type": "string",
						"description": "Status of the card",
						"enum": [
							"ACTIVE",
							"INACTIVE",
							"CLOSED",
							"DELETED",
							"EXPIRED",
							"PENDING",
							"APPROVED",
							"DECLINED",
							"GENERATED"
						]
					},
					"providerCode": {
						"type": "string",
						"description": "Provider this card was issued by",
						"enum": [
							"conferma",
							"ixaris",
							"wex",
							"fake",
							"lodged",
							"modulr",
							"unknown",
							"pax2pay"
						]
					},
					"providerCardId": {
						"type": "string",
						"description": "The id by which to refer to the card in all subsequent accesses to this card."
					},
					"cardAccount": {
						"$ref": "#/components/schemas/AccountResponse"
					},
					"fundingAccount": {
						"$ref": "#/components/schemas/AccountResponse"
					},
					"creatingSystem": {
						"type": "string",
						"description": "Creating system that made this card - portal, api, etc.",
						"enum": [
							"PORTAL",
							"REST_API",
							"FAB",
							"REST_API_PORTAL",
							"REST_API_EXTERNAL",
							"SOAP_API_FAB",
							"SOAP_API_EXTERNAL",
							"CRON",
							"UNKNOWN",
							"UNDEFINED"
						]
					},
					"createdBy": {
						"type": "string",
						"description": "Username of who created this card"
					},
					"bookingInfo": {
						"$ref": "#/components/schemas/BookingInfo"
					}
				}
			},
			"CardSearch": {
				"type": "object",
				"properties": {
					"cardId": {
						"type": "integer",
						"description": "Internal id to search for",
						"format": "int64",
						"deprecated": true
					},
					"providerCode": {
						"type": "string",
						"description": "Provider code to search for",
						"enum": [
							"conferma",
							"ixaris",
							"wex",
							"fake",
							"lodged",
							"modulr",
							"unknown",
							"pax2pay"
						]
					},
					"state": {
						"type": "string",
						"description": "Account states to search for",
						"enum": [
							"ACTIVE",
							"INACTIVE",
							"CLOSED",
							"DELETED",
							"EXPIRED",
							"PENDING",
							"APPROVED",
							"DECLINED",
							"GENERATED"
						]
					},
					"currency": {
						"type": "string"
					},
					"friendlyName": {
						"type": "string",
						"description": "Friendly name to search for, exact matches only"
					},
					"createdBy": {
						"type": "string",
						"description": "Created by username, exact matches only"
					},
					"nameOnCard": {
						"type": "string",
						"description": "Card holder's name, exact matches only"
					},
					"fundingBalanceIsLessThan": {
						"type": "number",
						"description": "Searches for cards with a funding balance of less than the specified value. Must also specify currency."
					},
					"personallyApprovable": {
						"type": "boolean",
						"description": "Searches for all cards that the current user can personally approve. If no limits set for a given currency, will return all pending cards for that currency."
					},
					"issueDate": {
						"type": "string",
						"description": "Date the card was created on",
						"format": "date"
					},
					"expiryDate": {
						"type": "string",
						"description": "Date the card will expire on",
						"format": "date"
					},
					"cardType": {
						"$ref": "#/components/schemas/CardTypeSpecification"
					},
					"cardNumber": {
						"type": "string",
						"description": "Card number, must be an exact match including obfuscation",
						"example": "444433******1111"
					},
					"providerAccountId": {
						"type": "string",
						"description": "Provider account id for the funding account that this card was created on. If set, provider code must also be set."
					},
					"createdBefore": {
						"type": "string",
						"description": "Searches for cards created before or on this date.",
						"format": "date-time"
					},
					"createdAfter": {
						"type": "string",
						"description": "Searches for cards created on or after this date.",
						"format": "date-time"
					},
					"usage": {
						"type": "string",
						"description": "Searches for cards with this usage - single, multiple, etc.",
						"enum": [
							"SINGLE_USE",
							"MULTIPLE_USE"
						]
					},
					"expiryDateAfter": {
						"type": "string",
						"description": "Search for cards that expire on or after the given date",
						"format": "date"
					}
				}
			},
			"CreateCardRequest": {
				"required": [
					"balance",
					"cardType",
					"currency",
					"providerCode"
				],
				"type": "object",
				"properties": {
					"cardType": {
						"$ref": "#/components/schemas/CardTypeSpecification"
					},
					"bookingInfo": {
						"$ref": "#/components/schemas/BookingInfo"
					},
					"providerAccountId": {
						"type": "string",
						"description": "Funding account to create the card from. Required if there are multiple possible funding accounts for this currency."
					},
					"providerCode": {
						"type": "string",
						"description": "Provider code to create the card with.",
						"enum": [
							"conferma",
							"ixaris",
							"wex",
							"fake",
							"lodged",
							"modulr",
							"unknown",
							"pax2pay"
						]
					},
					"balance": {
						"type": "number",
						"description": "Maximum spend on the card."
					},
					"currency": {
						"type": "string"
					},
					"fundingDate": {
						"type": "string",
						"description": "Ixaris only. If present, creates the card for 0 immediately, and schedules an amendment for the specified date.",
						"format": "date"
					},
					"expiryDate": {
						"type": "object",
						"properties": {
							"year": {
								"type": "integer",
								"format": "int32"
							},
							"month": {
								"type": "string",
								"enum": [
									"JANUARY",
									"FEBRUARY",
									"MARCH",
									"APRIL",
									"MAY",
									"JUNE",
									"JULY",
									"AUGUST",
									"SEPTEMBER",
									"OCTOBER",
									"NOVEMBER",
									"DECEMBER"
								]
							},
							"leapYear": {
								"type": "boolean"
							},
							"monthValue": {
								"type": "integer",
								"format": "int32"
							}
						},
						"description": "Expiry date for the card, yyyy-MM format, optional. If not set, will be a short distance in the future, depending on the provider used."
					},
					"usage": {
						"type": "string",
						"description": "Usage of the card",
						"default": "SINGLE_USE",
						"enum": [
							"SINGLE_USE",
							"MULTIPLE_USE"
						]
					}
				},
				"description": "Creates a virtual card.",
				"example": "{\n    \"providerCode\": \"modulr\",\n    \"balance\": \"1\",\n    \"currency\": \"GBP\",\n    \"cardType\": \"VISA_DEBIT\",\n}"
			},
			"CardFundingAccountResponse": {
				"type": "object",
				"properties": {
					"providerAccountId": {
						"type": "string",
						"description": "Funding account id"
					},
					"balance": {
						"type": "number",
						"description": "Funding account balance"
					}
				},
				"description": "Funding account information"
			},
			"CardResponseV2": {
				"type": "object",
				"properties": {
					"cardType": {
						"$ref": "#/components/schemas/CardTypeSpecification"
					},
					"cardNumber": {
						"type": "string",
						"description": "Card number"
					},
					"cvv": {
						"type": "string",
						"description": "Card security code"
					},
					"expiryDate": {
						"type": "object",
						"properties": {
							"year": {
								"type": "integer",
								"format": "int32"
							},
							"month": {
								"type": "string",
								"enum": [
									"JANUARY",
									"FEBRUARY",
									"MARCH",
									"APRIL",
									"MAY",
									"JUNE",
									"JULY",
									"AUGUST",
									"SEPTEMBER",
									"OCTOBER",
									"NOVEMBER",
									"DECEMBER"
								]
							},
							"leapYear": {
								"type": "boolean"
							},
							"monthValue": {
								"type": "integer",
								"format": "int32"
							}
						},
						"description": "Expiry date",
						"format": "yyy-MM"
					},
					"nameOnCard": {
						"type": "string",
						"description": "Card holders' name"
					},
					"balance": {
						"type": "number",
						"description": "Maximum limit of the card"
					},
					"issueDate": {
						"type": "string",
						"description": "Date when the card was issued on",
						"format": "date"
					},
					"providerCode": {
						"type": "string",
						"description": "Provider code",
						"enum": [
							"conferma",
							"ixaris",
							"wex",
							"fake",
							"lodged",
							"modulr",
							"unknown",
							"pax2pay"
						]
					},
					"providerCardId": {
						"type": "string",
						"description": "Provider card id"
					},
					"usage": {
						"type": "string",
						"description": "Card usage information",
						"enum": [
							"SINGLE_USE",
							"MULTIPLE_USE"
						]
					},
					"fundingAccount": {
						"$ref": "#/components/schemas/CardFundingAccountResponse"
					},
					"createdBy": {
						"type": "string",
						"description": "Username of creating user"
					}
				}
			},
			"PasswordValidateRequest": {
				"required": [
					"password"
				],
				"type": "object",
				"properties": {
					"password": {
						"type": "string",
						"description": "The password to check. Password requirements are based upon calculated entropy. Long passwords with complete words are harder to crack and easier to remember."
					}
				}
			},
			"PasswordValidateResponse": {
				"type": "object",
				"properties": {
					"result": {
						"type": "string",
						"enum": [
							"PASS",
							"FAIL"
						]
					},
					"feedback": {
						"type": "string"
					}
				}
			},
			"CardTypesConfig": {
				"type": "object",
				"properties": {
					"useLegacyCardTypesInResponse": {
						"type": "boolean",
						"description": "If set to false, expanded card types will be shown in api responses",
						"default": true
					},
					"hideCardTypes": {
						"type": "object",
						"additionalProperties": {
							"uniqueItems": true,
							"type": "array",
							"description": "Which card types should be hidden from both view and use. Cannot be simultaneously set with onlyShowCardTypes",
							"example": {
								"ixaris": [
									"VISA_CREDIT"
								],
								"modulr": [
									"VISA",
									"MASTERCARD"
								]
							},
							"items": {
								"type": "string",
								"description": "Which card types should be hidden from both view and use. Cannot be simultaneously set with onlyShowCardTypes",
								"example": "{\"ixaris\":[\"VISA_CREDIT\"],\"modulr\":[\"VISA\",\"MASTERCARD\"]}"
							}
						},
						"description": "Which card types should be hidden from both view and use. Cannot be simultaneously set with onlyShowCardTypes",
						"example": {
							"ixaris": [
								"VISA_CREDIT"
							],
							"modulr": [
								"VISA",
								"MASTERCARD"
							]
						}
					},
					"onlyShowCardTypes": {
						"type": "object",
						"additionalProperties": {
							"uniqueItems": true,
							"type": "array",
							"description": "Which card types should be visible and useable - all others will not be. Cannot be simultaneously set with hideCardTypes",
							"example": {
								"ixaris": [
									"VISA_CREDIT"
								],
								"modulr": [
									"VISA",
									"MASTERCARD"
								]
							},
							"items": {
								"type": "string",
								"description": "Which card types should be visible and useable - all others will not be. Cannot be simultaneously set with hideCardTypes",
								"example": "{\"ixaris\":[\"VISA_CREDIT\"],\"modulr\":[\"VISA\",\"MASTERCARD\"]}"
							}
						},
						"description": "Which card types should be visible and useable - all others will not be. Cannot be simultaneously set with hideCardTypes",
						"example": {
							"ixaris": [
								"VISA_CREDIT"
							],
							"modulr": [
								"VISA",
								"MASTERCARD"
							]
						}
					}
				},
				"description": "Config related to card types"
			},
			"UserConfig": {
				"type": "object",
				"properties": {
					"cardTypes": {
						"$ref": "#/components/schemas/CardTypesConfig"
					}
				}
			},
			"FundingAccountInboundTransferNotificationConfig": {
				"type": "object",
				"properties": {
					"enabled": {
						"type": "boolean",
						"description": "If not enabled, emails will not be sent",
						"default": false
					},
					"emails": {
						"uniqueItems": true,
						"type": "array",
						"description": "Email addresses for notifications to be sent to",
						"items": {
							"type": "string",
							"description": "Email addresses for notifications to be sent to"
						}
					}
				},
				"description": "Config related to notifications for deposits made into funding accounts"
			},
			"OrganisationConfig": {
				"type": "object",
				"properties": {
					"showDefaultRolesets": {
						"type": "boolean",
						"description": "If true, default rolesets will be shown when getting all rolesets.",
						"default": true
					},
					"cardTypes": {
						"$ref": "#/components/schemas/CardTypesConfig"
					},
					"inboundTransferConfig": {
						"$ref": "#/components/schemas/FundingAccountInboundTransferNotificationConfig"
					}
				},
				"description": "Organisation config, optional"
			},
			"Payload": {
				"type": "object",
				"description": "Configuration",
				"anyOf": [
					{
						"$ref": "#/components/schemas/UserConfig"
					},
					{
						"$ref": "#/components/schemas/OrganisationConfig"
					}
				]
			},
			"ConfigResponse": {
				"type": "object",
				"properties": {
					"config": {
						"$ref": "#/components/schemas/Payload"
					}
				}
			},
			"ConfigRequest": {
				"required": [
					"config"
				],
				"type": "object",
				"properties": {
					"config": {
						"type": "object",
						"description": "Full config object"
					}
				},
				"anyOf": [
					{
						"$ref": "#/components/schemas/OrganisationConfig"
					},
					{
						"$ref": "#/components/schemas/UserConfig"
					}
				]
			},
			"CredentialRequest": {
				"required": [
					"credentialProperties"
				],
				"type": "object",
				"properties": {
					"credentialProperties": {
						"type": "object",
						"additionalProperties": {
							"type": "string",
							"description": "Full set of credentials for this provider"
						},
						"description": "Full set of credentials for this provider"
					}
				},
				"description": "A set of credentials for provider setup"
			},
			"CredentialResponse": {
				"type": "object",
				"properties": {
					"providerCode": {
						"type": "string",
						"description": "Provider code",
						"enum": [
							"conferma",
							"ixaris",
							"wex",
							"fake",
							"lodged",
							"modulr",
							"unknown",
							"pax2pay"
						]
					},
					"credentialProperties": {
						"type": "object",
						"additionalProperties": {
							"type": "string",
							"description": "Credentials"
						},
						"description": "Credentials"
					}
				},
				"description": "The credentials created"
			},
			"LoginRequest": {
				"required": [
					"password",
					"username"
				],
				"type": "object",
				"properties": {
					"username": {
						"type": "string",
						"description": "Username to log in with"
					},
					"password": {
						"type": "string",
						"description": "Your password"
					},
					"effectiveOrganisation": {
						"type": "string",
						"description": "If allowed, will assume this organisation on login"
					},
					"trackingId": {
						"type": "string",
						"description": "Tracking id. One will be generated if this is not provided"
					},
					"consumersReference": {
						"type": "string",
						"description": "Consumer's reference. Is passed to certain providers on card creation if set."
					}
				}
			},
			"Issue": {
				"required": [
					"message",
					"severity"
				],
				"type": "object",
				"properties": {
					"severity": {
						"type": "string",
						"description": "Severity of the issue. Always fatal or error.",
						"deprecated": true,
						"enum": [
							"INFO",
							"WARNING",
							"ERROR",
							"FATAL"
						]
					},
					"message": {
						"type": "string",
						"description": "Error message"
					}
				},
				"description": "If status is not SUCCESS, contains the errors"
			},
			"UserLimit": {
				"required": [
					"currency",
					"limit",
					"setBy"
				],
				"type": "object",
				"properties": {
					"currency": {
						"type": "string"
					},
					"limit": {
						"minimum": 0,
						"type": "number"
					},
					"setBy": {
						"type": "string",
						"enum": [
							"USER",
							"CATEGORY"
						]
					}
				},
				"description": "User's limits"
			},
			"TwoFactorAuthenticationDetails": {
				"type": "object",
				"properties": {
					"enabled": {
						"type": "boolean",
						"description": "If the user is enabled for 2fa."
					},
					"provider": {
						"type": "string",
						"description": "What 2fa provider is being used, if the user is enabled. Only visible to the user, and to admins+. Users cannot see other user's 2fa providers."
					}
				},
				"description": "Contains information about two factor authentication."
			},
			"UserResponse": {
				"type": "object",
				"properties": {
					"username": {
						"type": "string",
						"description": "Username"
					},
					"firstName": {
						"type": "string",
						"description": "First name"
					},
					"lastName": {
						"type": "string",
						"description": "Last name"
					},
					"email": {
						"type": "string",
						"description": "Email address"
					},
					"status": {
						"type": "string",
						"description": "Status",
						"enum": [
							"ACTIVE",
							"INACTIVE",
							"DELETED",
							"PASSWORD_EXPIRED"
						]
					},
					"passwordUpdatedOn": {
						"type": "string",
						"description": "Date password last updated on",
						"format": "date"
					},
					"category": {
						"type": "string",
						"description": "User category"
					},
					"organisation": {
						"$ref": "#/components/schemas/OrganisationResponse"
					},
					"roles": {
						"uniqueItems": true,
						"type": "array",
						"description": "Rolesets this user has. Does not include any extra roles added individually",
						"items": {
							"type": "string",
							"description": "Rolesets this user has. Does not include any extra roles added individually"
						}
					},
					"userLimits": {
						"uniqueItems": true,
						"type": "array",
						"description": "User's limits",
						"items": {
							"$ref": "#/components/schemas/UserLimit"
						}
					},
					"2fa": {
						"$ref": "#/components/schemas/TwoFactorAuthenticationDetails"
					}
				},
				"description": "The users created"
			},
			"LoginResponse": {
				"required": [
					"effectiveOrganisation",
					"expiry",
					"invokingSystem",
					"organisation",
					"token",
					"trackingId",
					"user",
					"username"
				],
				"type": "object",
				"properties": {
					"issues": {
						"type": "array",
						"description": "If status is not SUCCESS, contains the errors",
						"items": {
							"$ref": "#/components/schemas/Issue"
						}
					},
					"status": {
						"type": "string",
						"description": "Status of this response",
						"enum": [
							"SUCCESS",
							"FAILURE"
						]
					},
					"token": {
						"type": "string",
						"description": "Authentication token"
					},
					"expiry": {
						"type": "string",
						"description": "Expiry time of the token",
						"format": "date-time"
					},
					"invokingSystem": {
						"type": "string",
						"description": "System that called this login.",
						"default": "REST_API",
						"enum": [
							"PORTAL",
							"REST_API",
							"FAB",
							"REST_API_PORTAL",
							"REST_API_EXTERNAL",
							"SOAP_API_FAB",
							"SOAP_API_EXTERNAL",
							"CRON",
							"UNKNOWN",
							"UNDEFINED"
						]
					},
					"trackingId": {
						"type": "string",
						"description": "Tracking id. Auto-generated on each login. "
					},
					"user": {
						"$ref": "#/components/schemas/UserResponse"
					},
					"username": {
						"type": "string",
						"description": "Username of the current user."
					},
					"effectiveOrganisation": {
						"$ref": "#/components/schemas/OrganisationResponse"
					},
					"organisation": {
						"type": "string",
						"description": "Organisation that the current user belongs to."
					}
				},
				"description": "Log in response. If successful, status will be SUCCESS and all of the fields will be populated. On failure, status will be FAILURE and issues will be present."
			},
			"RelogWithNewSessionDetailsRequest": {
				"type": "object",
				"properties": {
					"trackingId": {
						"type": "string",
						"description": "Change your current tracking id"
					},
					"consumersReference": {
						"type": "string",
						"description": "Change your current consumers' reference"
					}
				},
				"description": "Optionally change tracking id or consumers' reference. Does not need to be present."
			},
			"TwoFactorAuthenticationRegistrationRequest": {
				"type": "object"
			},
			"TwoFactorAuthenticationRegistrationResponse": {
				"type": "object",
				"properties": {
					"userId": {
						"type": "string",
						"description": "User id for two factor authentication."
					},
					"backupCodes": {
						"uniqueItems": true,
						"type": "array",
						"description": "Back up codes for this user, for account recovery. **Do not lose these codes, you cannot retrieve them.**",
						"items": {
							"type": "string",
							"description": "Back up codes for this user, for account recovery. **Do not lose these codes, you cannot retrieve them.**"
						}
					},
					"qrCode": {
						"type": "string",
						"description": "QR code url, to be presented to the user for entry into an authenticator app."
					}
				},
				"description": "On successful registration, information required to be presented to the user will be returned. Much of this cannot be re-obtained, so please do not lose!"
			},
			"UserRequest": {
				"required": [
					"email",
					"firstName",
					"lastName",
					"password",
					"username"
				],
				"type": "object",
				"properties": {
					"username": {
						"pattern": "[^.\\/]+",
						"type": "string",
						"description": "The username you will use to log in to the API/Portal with. "
					},
					"password": {
						"type": "string",
						"description": "The password the user will use to log in to the API/Portal with. Password requirements are based upon calculated entropy. Long passwords with complete words are harder to crack and easier to remember."
					},
					"firstName": {
						"type": "string",
						"description": "The first name of the user being created."
					},
					"lastName": {
						"type": "string",
						"description": "The last name of the user being created."
					},
					"email": {
						"type": "string",
						"description": "The email associated with the users account. This will be used for password resets as well as any other notification for that user."
					},
					"rolesets": {
						"uniqueItems": true,
						"type": "array",
						"description": "The rolesets the user will be given. Used to determine users permissions within the API/Portal.",
						"items": {
							"type": "string",
							"description": "The rolesets the user will be given. Used to determine users permissions within the API/Portal."
						}
					},
					"category": {
						"type": "string",
						"description": "Categories for the users are used to set group limits and rules."
					}
				},
				"description": "The users that we are creating for this organisation. Must include at least one user with an 'Default Admin' role."
			},
			"UserLimitsRequest": {
				"required": [
					"currency",
					"limit"
				],
				"type": "object",
				"properties": {
					"currency": {
						"type": "string"
					},
					"limit": {
						"minimum": 0,
						"type": "number",
						"description": "Lower limit threshold"
					}
				},
				"description": "Limits for the user"
			},
			"UserChangeRequest": {
				"required": [
					"email",
					"firstName",
					"lastName"
				],
				"type": "object",
				"properties": {
					"firstName": {
						"type": "string",
						"description": "The first name of the user being created."
					},
					"lastName": {
						"type": "string",
						"description": "The last name of the user being created."
					},
					"email": {
						"type": "string",
						"description": "The email associated with the users account. This will be used for password resets as well as any other notification for that user."
					},
					"category": {
						"type": "string",
						"description": "Categories for the users are used to set group limits and rules."
					},
					"userLimits": {
						"type": "array",
						"description": "Limits for the user",
						"items": {
							"$ref": "#/components/schemas/UserLimitsRequest"
						}
					}
				}
			},
			"UserSearchRequest": {
				"type": "object",
				"properties": {
					"username": {
						"type": "string",
						"description": "Username to search for, exact match"
					},
					"firstName": {
						"type": "string",
						"description": "First name to search for, exact match"
					},
					"lastName": {
						"type": "string",
						"description": "Last name to search for, exact match"
					},
					"email": {
						"type": "string",
						"description": "Email to search for, exact match"
					},
					"category": {
						"type": "string",
						"description": "Category to search for, exact match"
					}
				}
			},
			"PasswordChangeRequest": {
				"required": [
					"newPassword"
				],
				"type": "object",
				"properties": {
					"username": {
						"type": "string",
						"description": "Should be null if you want to change your own user's password, or non-null if you want to change someone else's"
					},
					"newPassword": {
						"type": "string",
						"description": "New password. Password requirements are based upon calculated entropy. Long passwords with complete words are harder to crack and easier to remember."
					}
				}
			},
			"UserLimitsDeleteRequest": {
				"required": [
					"currency"
				],
				"type": "object",
				"properties": {
					"currency": {
						"type": "string"
					}
				}
			},
			"RoleResponse": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of this role"
					},
					"description": {
						"type": "string",
						"description": "Brief description of this role."
					},
					"internal": {
						"type": "boolean",
						"description": "Present if the role is internal, for eg assume - non-mcom orgs will never have assume, and they shouldn't know about it. Null if false. Only possible values are null and true."
					}
				},
				"description": "All roles that this user has, from all rolesets and individual roles"
			},
			"RolesetResponse": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of this roleset"
					},
					"description": {
						"type": "string",
						"description": "Description of this roleset"
					},
					"isDefault": {
						"type": "boolean",
						"description": "Default rolesets are shared between all users, and cannot be modified by users."
					},
					"internal": {
						"type": "boolean",
						"description": "Only non-null if you have roles.view-internal. Hidden from customers."
					},
					"containedRoles": {
						"type": "array",
						"description": "The roles that this roleset contains.",
						"items": {
							"$ref": "#/components/schemas/RoleResponse"
						}
					}
				},
				"description": "Rolesets that this user has been given."
			},
			"CreateRolesetRequest": {
				"required": [
					"name",
					"roles"
				],
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of the roleset."
					},
					"description": {
						"type": "string",
						"description": "Additional description for the roleset."
					},
					"roles": {
						"uniqueItems": true,
						"type": "array",
						"description": "The roles that this roleset contains.",
						"items": {
							"type": "string",
							"description": "The roles that this roleset contains."
						}
					}
				}
			},
			"UpdateRolesetRequest": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "New name for the roleset. Only changes the value if not null."
					},
					"description": {
						"type": "string",
						"description": "New description for the roleset. Only changes the value if not null."
					},
					"roles": {
						"maxItems": 2147483647,
						"minItems": 1,
						"uniqueItems": true,
						"type": "array",
						"description": "If present, sets the roleset's contained roles to what's in this. Wildcard expansion is supported.",
						"items": {
							"type": "string",
							"description": "If present, sets the roleset's contained roles to what's in this. Wildcard expansion is supported."
						}
					},
					"addRoles": {
						"maxItems": 2147483647,
						"minItems": 1,
						"uniqueItems": true,
						"type": "array",
						"description": "If present, adds the contained roles to this roleset. Wildcard expansion is supported.",
						"items": {
							"type": "string",
							"description": "If present, adds the contained roles to this roleset. Wildcard expansion is supported."
						}
					},
					"removeRoles": {
						"maxItems": 2147483647,
						"minItems": 1,
						"uniqueItems": true,
						"type": "array",
						"description": "If present, removes the contained roles from this roleset. Wildcard expansion is supported.",
						"items": {
							"type": "string",
							"description": "If present, removes the contained roles from this roleset. Wildcard expansion is supported."
						}
					}
				},
				"description": "Request to update a roleset."
			},
			"SearchRolesetsRequest": {
				"required": [
					"includeDefaults",
					"includeInternal"
				],
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of the roleset. Performs case insensitive contains."
					},
					"description": {
						"type": "string",
						"description": "Roleset description. Performs case insensitive contains."
					},
					"includeDefaults": {
						"type": "string",
						"description": "Should default rolesets be included in the response?",
						"default": "INCLUDE",
						"enum": [
							"INCLUDE",
							"EXCLUDE",
							"ONLY"
						]
					},
					"containsRoles": {
						"uniqueItems": true,
						"type": "array",
						"description": "A set of roles that the rolesets must contain all of",
						"items": {
							"type": "string",
							"description": "A set of roles that the rolesets must contain all of"
						}
					},
					"doesNotContainRoles": {
						"uniqueItems": true,
						"type": "array",
						"description": "A set of roles that the rolesets must not contain any of",
						"items": {
							"type": "string",
							"description": "A set of roles that the rolesets must not contain any of"
						}
					},
					"includeInternal": {
						"type": "string",
						"description": "Should internal rolesets be included in the response?",
						"default": "INCLUDE",
						"enum": [
							"INCLUDE",
							"EXCLUDE",
							"ONLY"
						]
					}
				}
			},
			"UserRoleResponse": {
				"type": "object",
				"properties": {
					"username": {
						"type": "string",
						"description": "Username this applies to"
					},
					"roles": {
						"type": "array",
						"description": "Roles that this user has been given, outside of rolesets.",
						"items": {
							"$ref": "#/components/schemas/RoleResponse"
						}
					},
					"rolesets": {
						"type": "array",
						"description": "Rolesets that this user has been given.",
						"items": {
							"$ref": "#/components/schemas/RolesetResponse"
						}
					},
					"allRoles": {
						"type": "array",
						"description": "All roles that this user has, from all rolesets and individual roles",
						"items": {
							"$ref": "#/components/schemas/RoleResponse"
						}
					}
				},
				"description": "Cut down version of a full user response, contains only role information."
			},
			"AccountCreationRequest": {
				"required": [
					"currency",
					"providerCode"
				],
				"type": "object",
				"properties": {
					"providerAccountId": {
						"type": "string",
						"description": "Provider account identifier for this account. Must already exist on the providers' system."
					},
					"providerCode": {
						"type": "string",
						"description": "Provider who owns this account",
						"enum": [
							"conferma",
							"ixaris",
							"wex",
							"fake",
							"lodged",
							"modulr",
							"unknown",
							"pax2pay"
						]
					},
					"friendlyName": {
						"type": "string",
						"description": "Display name for this account",
						"default": "a GUID"
					},
					"currency": {
						"type": "string"
					}
				},
				"description": "The funding accounts to be created. The provider code element on these must match the provider code element on this object."
			},
			"FundingLimitRequest": {
				"required": [
					"email",
					"limit"
				],
				"type": "object",
				"properties": {
					"email": {
						"type": "array",
						"description": "List of emails that funding limit alerts should go to",
						"items": {
							"type": "string",
							"description": "List of emails that funding limit alerts should go to"
						}
					},
					"limit": {
						"minimum": 0,
						"type": "number",
						"description": "Lower threshold for funding limit alerts to be triggered on"
					}
				}
			},
			"UpdateAccountRequest": {
				"required": [
					"state"
				],
				"type": "object",
				"properties": {
					"state": {
						"type": "string",
						"description": "State of the account. This can be used to delete the account. Deleting is unchangeable!",
						"default": "ACTIVE",
						"enum": [
							"ACTIVE",
							"INACTIVE",
							"CLOSED",
							"DELETED",
							"EXPIRED",
							"PENDING",
							"APPROVED",
							"DECLINED",
							"GENERATED"
						]
					},
					"friendlyName": {
						"type": "string",
						"description": "Friendly name of the account, used to identify the account on the portals.",
						"default": "a GUID"
					},
					"fundingLimit": {
						"$ref": "#/components/schemas/FundingLimitRequest"
					}
				},
				"description": "Request for updating a funding account. Accounts are mostly immutable, you can only change a few things about them. If any of the values are null, the existing value on the funding account won't be overwritten with null, it'll just be kept the same as is."
			},
			"AccountSearchRequest": {
				"type": "object",
				"properties": {
					"friendlyName": {
						"type": "string",
						"description": "Search by friendly name. Exact matches only."
					},
					"providerCodes": {
						"type": "array",
						"description": "Provider codes to get accounts for",
						"items": {
							"type": "string",
							"description": "Provider codes to get accounts for",
							"enum": [
								"conferma",
								"ixaris",
								"wex",
								"fake",
								"lodged",
								"modulr",
								"unknown",
								"pax2pay"
							]
						}
					},
					"currency": {
						"type": "string"
					},
					"accountState": {
						"type": "string",
						"description": "State of the account",
						"enum": [
							"ACTIVE",
							"INACTIVE",
							"CLOSED",
							"DELETED",
							"EXPIRED",
							"PENDING",
							"APPROVED",
							"DECLINED",
							"GENERATED"
						]
					},
					"providerAccountId": {
						"type": "string",
						"description": "Provider account id for the account"
					}
				}
			},
			"AmendCardRequest": {
				"required": [
					"currency"
				],
				"type": "object",
				"properties": {
					"newBalance": {
						"minimum": 0,
						"type": "number",
						"description": "New balance for the card. Regardless of the current balance, the card will be set to this amount. Either newBalance or balanceDifferential must be supplied."
					},
					"balanceDifferential": {
						"type": "number",
						"description": "Amount that the card's balance will be changed by. Can be negative. Either newBalance or balanceDifferential must be supplied."
					},
					"currency": {
						"type": "string"
					},
					"fundingDate": {
						"type": "string",
						"description": "Date that this balance adjustment will be made on. Optional. If not set, the adjustment will be made immediately. Not all providers support future amendments.",
						"format": "date"
					}
				}
			},
			"ProcessedStatement": {
				"required": [
					"description",
					"provider",
					"status",
					"timestamp",
					"type"
				],
				"type": "object",
				"properties": {
					"timestamp": {
						"type": "string",
						"format": "date-time"
					},
					"provider": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"CARD",
							"ACCOUNT"
						]
					},
					"status": {
						"type": "string",
						"enum": [
							"APPROVED",
							"SETTLED",
							"DECLINED",
							"EXPIRED",
							"REVERSED",
							"REFUNDED"
						]
					},
					"reference": {
						"type": "string"
					},
					"reason": {
						"type": "string"
					},
					"transactionAmount": {
						"type": "number"
					},
					"transactionCurrency": {
						"type": "string"
					},
					"billingAmount": {
						"type": "number"
					},
					"billingCurrency": {
						"type": "string"
					}
				}
			},
			"TransactionResponse": {
				"required": [
					"associatedAccount",
					"createdBy",
					"createdOn",
					"id",
					"issuedAmount",
					"issuedCurrency",
					"organisationCode",
					"organisationName",
					"provider",
					"providerTransactionId",
					"prvTimestamp",
					"receivedAmount",
					"receivedCurrency",
					"transactionType",
					"updatedOn"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Internal id",
						"format": "int64"
					},
					"providerTransactionId": {
						"type": "string",
						"description": "Provider transaction id"
					},
					"organisationCode": {
						"type": "string",
						"description": "Organisation code"
					},
					"organisationName": {
						"type": "string",
						"description": "Organisation name"
					},
					"transactionType": {
						"type": "string",
						"description": "Transaction type",
						"enum": [
							"CREATE_CARD",
							"FUND_CARD",
							"PURCHASE",
							"REFUND",
							"SWEEP",
							"CLOSE",
							"FREEZE",
							"THAW",
							"APPROVAL_PENDING",
							"EXPIRE",
							"UNKNOWN"
						]
					},
					"provider": {
						"type": "string",
						"description": "Free text, usually not actually the provider code"
					},
					"prvTimestamp": {
						"type": "string",
						"description": "Timestamp",
						"format": "date-time"
					},
					"associatedAccount": {
						"type": "integer",
						"description": "Funding account internal id",
						"format": "int64"
					},
					"issuedAmount": {
						"type": "number",
						"description": "Issued amount"
					},
					"issuedCurrency": {
						"type": "string"
					},
					"receivedAmount": {
						"type": "number",
						"description": "Received amount"
					},
					"receivedCurrency": {
						"type": "string"
					},
					"exchangeRate": {
						"type": "number",
						"description": "Exchange rate"
					},
					"description": {
						"type": "string",
						"description": "Free text description"
					},
					"createdOn": {
						"type": "string",
						"description": "Datetime of transaction creation",
						"format": "date-time"
					},
					"createdBy": {
						"type": "string",
						"description": "Username of creating user"
					},
					"updatedOn": {
						"type": "string",
						"description": "Datetime of last transaction update",
						"format": "date-time"
					},
					"groupId": {
						"type": "integer",
						"description": "Group id, used to tie together find and amend transactions",
						"format": "int64"
					},
					"bookingInfo": {
						"$ref": "#/components/schemas/BookingInfo"
					},
					"friendlyName": {
						"type": "string",
						"description": "Friendly name"
					},
					"expectedFundingTimestamp": {
						"type": "string",
						"description": "If this is a FUND_CARD transaction with a future (at time of creation) funding date, this will represent when this funding will happen.",
						"format": "date-time"
					}
				}
			},
			"CardTypeResponse": {
				"type": "object",
				"properties": {
					"providerCode": {
						"type": "string",
						"description": "Provider that this card type applies to.",
						"enum": [
							"conferma",
							"ixaris",
							"wex",
							"fake",
							"lodged",
							"modulr",
							"unknown",
							"pax2pay"
						]
					},
					"cardTypeId": {
						"type": "string",
						"description": "Id for the card type. Primary way to refer to it. Provider code + id combination is unique."
					},
					"description": {
						"type": "string",
						"description": "Human readable description of this card type."
					},
					"scheme": {
						"type": "string",
						"description": "Scheme of the card type.",
						"enum": [
							"VISA",
							"MASTERCARD",
							"AMERICAN_EXPRESS"
						]
					},
					"funding": {
						"type": "string",
						"description": "Optional. Describes the funding type of the card type.",
						"enum": [
							"DEBIT",
							"CREDIT",
							"PREPAID"
						]
					},
					"currencies": {
						"type": "array",
						"description": "Optional. The currencies that this card type can be applied to. If empty, applies to all currencies that it can.",
						"items": {
							"type": "string"
						}
					},
					"flags": {
						"type": "array",
						"description": "Optional. Additional flags that describe the card type, such as business, corporate, etc.",
						"items": {
							"type": "string",
							"description": "Optional. Additional flags that describe the card type, such as business, corporate, etc.",
							"enum": [
								"CORPORATE",
								"BUSINESS",
								"CONSUMER"
							]
						}
					},
					"bins": {
						"type": "array",
						"description": "Optional. Bins that the card type can create. Some bins may be historical only.",
						"items": {
							"type": "string",
							"description": "Optional. Bins that the card type can create. Some bins may be historical only."
						}
					},
					"preActive": {
						"type": "boolean",
						"description": "If pre-active, cards cannot be made under this card type, but it will be possible in future."
					}
				}
			},
			"CardTypeSearchRequest": {
				"type": "object",
				"properties": {
					"providerCode": {
						"type": "string",
						"description": "Provider code",
						"enum": [
							"conferma",
							"ixaris",
							"wex",
							"fake",
							"lodged",
							"modulr",
							"unknown",
							"pax2pay"
						]
					},
					"currency": {
						"type": "string"
					},
					"description": {
						"type": "string",
						"description": "Exact description match"
					},
					"descriptionContains": {
						"type": "string",
						"description": "Partial description match"
					},
					"scheme": {
						"type": "string",
						"description": "Card scheme",
						"enum": [
							"VISA",
							"MASTERCARD",
							"AMERICAN_EXPRESS"
						]
					},
					"fundingType": {
						"type": "string",
						"description": "Funding type",
						"enum": [
							"DEBIT",
							"CREDIT",
							"PREPAID"
						]
					},
					"flags": {
						"type": "array",
						"description": "Card type flags",
						"items": {
							"type": "string",
							"description": "Card type flags",
							"enum": [
								"CORPORATE",
								"BUSINESS",
								"CONSUMER"
							]
						}
					},
					"bin": {
						"type": "string",
						"description": "Card BIN (first 6 numbers)"
					},
					"status": {
						"type": "string",
						"description": "Card type status",
						"enum": [
							"ACTIVE",
							"DEPRECATED",
							"PREACTIVE",
							"DISCONTINUED"
						]
					}
				},
				"description": "Search request for card types."
			},
			"CardOptionSearch": {
				"required": [
					"currency",
					"fundCheck"
				],
				"type": "object",
				"properties": {
					"supplier": {
						"type": "string",
						"description": "Supplier name or code to be searched for."
					},
					"balance": {
						"minimum": 0,
						"type": "number",
						"description": "Amount of money to be put on the card."
					},
					"currency": {
						"type": "string"
					},
					"fundCheck": {
						"type": "boolean",
						"description": "If true, will check the balance in the funding account before returning the card option as valid. If balance is less than the amount being searched for, will not return this",
						"default": false
					}
				}
			},
			"Criteria": {
				"required": [
					"currencies"
				],
				"type": "object",
				"properties": {
					"usernames": {
						"type": "array",
						"description": "Usernames to match with",
						"items": {
							"type": "string",
							"description": "Usernames to match with"
						}
					},
					"categories": {
						"type": "array",
						"description": "Categories to match with",
						"items": {
							"type": "string",
							"description": "Categories to match with"
						}
					},
					"currencies": {
						"type": "array",
						"description": "Currencies for the card. Mandatory to have at least one.",
						"items": {
							"type": "string"
						}
					},
					"maxAmount": {
						"minimum": 0,
						"type": "number",
						"description": "Maximum balance to return this criteria for"
					},
					"productTypes": {
						"type": "array",
						"description": "Product types to search for.",
						"items": {
							"type": "string",
							"description": "Product types to search for.",
							"enum": [
								"FLIGHT",
								"ACCOMMODATION",
								"ANY",
								"CAR_PARKING",
								"CAR_HIRE",
								"TRANSFER",
								"INSURANCE",
								"PACKAGE",
								"RAIL",
								"CRUISE",
								"ATTRACTION",
								"BAGGAGE_TRACKING"
							]
						}
					},
					"suppliers": {
						"type": "array",
						"description": "Suppliers to search for. If suppliers are configured, either names or codes are accepted, and will be expanded",
						"items": {
							"type": "string",
							"description": "Suppliers to search for. If suppliers are configured, either names or codes are accepted, and will be expanded"
						}
					},
					"bookingSources": {
						"type": "array",
						"description": "Booking sources to search for",
						"items": {
							"type": "string",
							"description": "Booking sources to search for",
							"enum": [
								"PORTAL",
								"REST_API",
								"FAB",
								"REST_API_PORTAL",
								"REST_API_EXTERNAL",
								"SOAP_API_FAB",
								"SOAP_API_EXTERNAL",
								"CRON",
								"UNKNOWN",
								"UNDEFINED"
							]
						}
					},
					"ruleStartDate": {
						"type": "string",
						"description": "Date at which this rule comes into effect",
						"format": "date"
					},
					"ruleEndDate": {
						"type": "string",
						"description": "Date at which this rule ceases to be in effect",
						"format": "date"
					},
					"rank": {
						"type": "integer",
						"description": "Rank. If search terms end up with the same sets of criteria for different cards, this is mandatory to separate them.",
						"format": "int32",
						"default": 0
					},
					"negated": {
						"type": "boolean",
						"description": "Negates the whole rule. If a rule is negated, it removes the card from the offered pool if the rule is matched.",
						"default": false
					}
				},
				"description": "Criteria request - defines which search criteria will be able to return which cards. A criteria matches if the criterion (for example, supplier) either matches the value (ie, the supplier searched for is the same), or if the criteria has an empty value for that field. Positive matches are ordered higher than null matches."
			},
			"InsertCardRequest": {
				"required": [
					"cardType",
					"providerCode"
				],
				"type": "object",
				"properties": {
					"providerCode": {
						"type": "string",
						"description": "Provider code",
						"enum": [
							"conferma",
							"ixaris",
							"wex",
							"fake",
							"lodged",
							"modulr",
							"unknown",
							"pax2pay"
						]
					},
					"cardType": {
						"$ref": "#/components/schemas/CardTypeSpecification"
					},
					"useAs": {
						"type": "string",
						"description": "Nullable, if null then equivalent to the card type.",
						"deprecated": true
					},
					"providerAccountId": {
						"type": "string",
						"description": "Funding account to use for this card, optional"
					}
				},
				"description": "The card to be created"
			},
			"InsertCardOptionRequest": {
				"required": [
					"card",
					"criteria"
				],
				"type": "object",
				"properties": {
					"criteria": {
						"type": "array",
						"description": "List of criteria that apply to this card",
						"items": {
							"$ref": "#/components/schemas/Criteria"
						}
					},
					"card": {
						"$ref": "#/components/schemas/InsertCardRequest"
					}
				},
				"description": "The card options that were created for this."
			},
			"PaymentOption": {
				"required": [
					"type"
				],
				"type": "object",
				"properties": {
					"type": {
						"type": "string"
					}
				},
				"description": "Generated card",
				"discriminator": {
					"propertyName": "type"
				}
			},
			"PaymentMethodOptionResponse": {
				"required": [
					"generationChargeAmount",
					"generationChargeCurrency",
					"option"
				],
				"type": "object",
				"properties": {
					"option": {
						"$ref": "#/components/schemas/PaymentOption"
					},
					"generationChargeCurrency": {
						"type": "string",
						"deprecated": true
					},
					"generationChargeAmount": {
						"minimum": 0,
						"type": "number",
						"description": "Legacy",
						"deprecated": true
					}
				}
			},
			"BeneficiaryRequest": {
				"required": [
					"fullName",
					"status",
					"transferDestination"
				],
				"type": "object",
				"properties": {
					"transferDestination": {
						"$ref": "#/components/schemas/TransferDestinationInfo"
					},
					"defaultReference": {
						"type": "string",
						"description": "Default reference for the beneficiary"
					},
					"status": {
						"type": "string",
						"description": "Status of the beneficiary",
						"default": "ACTIVE",
						"enum": [
							"ACTIVE",
							"DELETED",
							"OUTDATED"
						]
					},
					"name": {
						"type": "string",
						"description": "Name of the beneficiary"
					},
					"fullName": {
						"type": "string",
						"description": "Full legal name of the beneficiary"
					}
				}
			},
			"NonBeneficiaryTransferDestination": {
				"required": [
					"fullName"
				],
				"type": "object",
				"properties": {
					"accountNumber": {
						"type": "string",
						"description": "Account number. If present, sortCode must also be present, and iban/bic not present",
						"example": "40105678"
					},
					"sortCode": {
						"type": "string",
						"description": "Sort code, dashes optional. If present, accountNumber must also be present, and iban/bic not present",
						"example": "650483"
					},
					"iban": {
						"type": "string",
						"description": "IBAN. If present, accountNumber/sortCode must not be  present",
						"example": "FR7630006000011234567890189"
					},
					"bic": {
						"type": "string",
						"description": "BIC, aka SWIFT. If present, iban must also be present, and accountNumber/sortCode not present",
						"example": "UNCRITMM"
					},
					"address": {
						"$ref": "#/components/schemas/AddressInfo"
					},
					"fullName": {
						"type": "string",
						"description": "Full legal name"
					},
					"saveAsNewBeneficiary": {
						"type": "boolean",
						"description": "Should we save this as a new beneficiary for you?"
					}
				},
				"description": "Non-beneficiary destination to send this to"
			},
			"TransferRequest": {
				"required": [
					"amount",
					"providerCode",
					"providerSourceAccountId"
				],
				"type": "object",
				"properties": {
					"providerCode": {
						"type": "string",
						"description": "Provider code for the source account",
						"enum": [
							"conferma",
							"ixaris",
							"wex",
							"fake",
							"lodged",
							"modulr",
							"unknown",
							"pax2pay"
						]
					},
					"providerSourceAccountId": {
						"type": "string",
						"description": "Identifier for the source account"
					},
					"beneficiaryId": {
						"type": "string",
						"description": "Beneficiary id to send this to"
					},
					"destination": {
						"$ref": "#/components/schemas/NonBeneficiaryTransferDestination"
					},
					"destinationProviderAccountId": {
						"type": "string",
						"description": "Funding account id to send this to"
					},
					"amount": {
						"minimum": 0.01,
						"exclusiveMinimum": false,
						"type": "number",
						"description": "Amount to be transferred. The currency is defined by the source account"
					},
					"currency": {
						"type": "string"
					},
					"reference": {
						"type": "string",
						"description": "Reference for this transfer. Nullable if beneficiary transfer and beneficiary has a default reference"
					},
					"paymentDate": {
						"type": "string",
						"description": "Date at which to make the payment.",
						"format": "date"
					}
				}
			},
			"DateRangeLocalDate": {
				"type": "object",
				"properties": {
					"start": {
						"type": "string",
						"description": "Start date/time of the range",
						"format": "date"
					},
					"end": {
						"type": "string",
						"description": "End date/time of the range",
						"format": "date"
					}
				},
				"description": "Dates to search between"
			},
			"TransferSearch": {
				"type": "object",
				"properties": {
					"status": {
						"type": "string",
						"description": "Status of the transfer",
						"enum": [
							"PENDING",
							"PENDING_FOR_DATE",
							"PENDING_FOR_FUNDS",
							"SETTLED",
							"CANCELLED",
							"ERROR_REJECTED",
							"APPROVAL_PENDING",
							"DECLINED",
							"APPROVED",
							"GENERATED"
						]
					},
					"personallyApprovable": {
						"type": "boolean",
						"description": "Searches for all bank transfers that the current user can personally approve. If no limits set for a given currency, will return all awaiting approval bank transfers for that currency."
					},
					"searchString": {
						"type": "string",
						"description": "Fuzzy search string. If present, all other fields are ignored.",
						"deprecated": true
					},
					"paymentDates": {
						"$ref": "#/components/schemas/DateRangeLocalDate"
					}
				}
			},
			"ConfigTypesResponse": {
				"type": "object",
				"properties": {
					"types": {
						"type": "array",
						"description": "Configuration types",
						"items": {
							"type": "string"
						}
					}
				}
			},
			"ConfigMatchesRequest": {
				"required": [
					"condition"
				],
				"type": "object",
				"properties": {
					"condition": {
						"type": "string",
						"description": "Config matching string."
					}
				}
			},
			"ConfigMatchesResponse": {
				"type": "object",
				"properties": {
					"value": {
						"type": "string",
						"description": "Config key - username or organisation name"
					},
					"config": {
						"type": "object",
						"description": "Configuration"
					}
				}
			},
			"FiveFieldsBookingInfoRequest": {
				"type": "object",
				"properties": {
					"agentBookingReference": {
						"type": "string",
						"description": "Agent booking reference. This is your own reference for this booking."
					},
					"departureDate": {
						"type": "string",
						"description": "Date at which the flight departs",
						"format": "date"
					},
					"supplierBookingReference": {
						"type": "string",
						"description": "Booking reference obtained from the air operator"
					},
					"leadPassengerName": {
						"type": "string",
						"description": "Lead passenger name"
					},
					"supplierCode": {
						"type": "string",
						"description": "Which air operator"
					}
				}
			},
			"BookingInfoRequest": {
				"type": "object",
				"anyOf": [
					{
						"$ref": "#/components/schemas/FiveFieldsBookingInfoRequest"
					}
				]
			},
			"BookingInfoResponse": {
				"type": "object",
				"properties": {
					"bookingInfoIdentifier": {
						"type": "string"
					}
				}
			},
			"FiveFieldsBookingInfoResponse": {
				"type": "object",
				"properties": {
					"bookingInfoIdentifier": {
						"type": "string",
						"description": "Unique identifier for this booking info"
					},
					"agentBookingReference": {
						"type": "string",
						"description": "Agent booking reference. This is your own reference for this booking."
					},
					"departureDate": {
						"type": "string",
						"description": "Date at which the flight departs",
						"format": "date"
					},
					"supplierBookingReference": {
						"type": "string",
						"description": "Booking reference obtained from the air operator"
					},
					"leadPassengerName": {
						"type": "string",
						"description": "Lead passenger name"
					},
					"supplierCode": {
						"type": "string",
						"description": "Which air operator"
					}
				}
			}
		}
	}
}
